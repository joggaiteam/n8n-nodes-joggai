import {
	INodeProperties,
	IExecuteFunctions,
	IHttpRequestOptions,
	INodeExecutionData,
} from 'n8n-workflow';

export const assetsProperties: INodeProperties[] = [
	{
		displayName: 'Operation',
		name: 'operation',
		type: 'options',
		noDataExpression: true,
		displayOptions: {
			show: {
				resource: ['assets'],
			},
		},
		options: [
			{
				name: 'AI Scripts',
				value: 'createScript',
				description:
					"Simply provide the product information or the product_id generated in the Upload URL to create product, and you can create several different styles of product introduction scripts.If you do not provide the product_id, then the product's name and description are required.",
				action: 'AI Scripts',
			},
			{
				name: 'Upload Media',
				value: 'uploadFile',
				description:
					'Generate a signed URL for file upload. Use the sign_url obtained here to upload your file.',
				action: 'Upload Media',
			},
			{
				name: 'Generate AI Avatar Photo',
				value: 'generateFromPhoto',
				description: 'Generate four photos based on the provided parameters',
				action: 'Generate AI Avatar Photo',
			},
			{
				name: 'Generate Avatar New Look Photo',
				value: 'generateNewLook',
				description:
					'Based on the provided photo, a new photo is generated by marrying the input parameters',
				action: 'Generate Avatar New Look Photo',
			},
			{
				name: 'Add Motion',
				value: 'addMotion',
				description: 'Adds an motion for the specified Photo Avatar',
				action: 'Add Motion',
			},
			{
				name: 'Check Photo Generation Status',
				value: 'checkPhotoStatus',
				description:
					'Check the generation status of the AI profile photo according to the photo ID',
				action: 'Check Photo Generation Status',
			},
			{
				name: 'Check Motion Generation Status',
				value: 'checkMotionStatus',
				description: 'Check the generation status of the Photo Avatar motion based on the motionID',
				action: 'Check Motion Generation Status',
			},
		],
		default: 'createScript',
		required: true,
	},
	{
		displayName: 'Product ID',
		name: 'productId',
		type: 'string',
		default: '',
		description:
			'Simply provide the product information or the product_id generated at the "Upload URL to Create Product" endpoint, and you can create several different styles of product introduction scripts',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['createScript'],
			},
		},
	},
	{
		displayName: 'Language',
		name: 'language',
		type: 'string',
		default: 'english',
		description: 'Script generation language',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['createScript'],
			},
		},
		required: true,
	},
	{
		displayName: 'Name',
		name: 'name',
		type: 'string',
		default: '',
		description: 'Product name',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['createScript'],
			},
		},
		required: true,
	},
	{
		displayName: 'Description',
		name: 'description',
		type: 'string',
		default: '',
		description: 'Product introduction and selling points',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['createScript'],
			},
		},
		required: true,
	},
	{
		displayName: 'Target Audience',
		name: 'targetAudience',
		type: 'string',
		default: '',
		description: 'Target audience for the product',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['createScript'],
			},
		},
		required: true,
	},
	{
		displayName: 'Video Length',
		name: 'videoLength',
		type: 'string',
		default: '15',
		options: [
			{
				name: '15',
				value: '15',
			},
			{
				name: '30',
				value: '30',
			},
			{
				name: '60',
				value: '60',
			},
		],
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['createScript'],
			},
		},
		required: true,
	},
	{
		displayName: 'Filename',
		name: 'filename',
		type: 'string',
		default: '',
		description: 'file name',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['uploadFile'],
			},
		},
		required: true,
	},
	{
		displayName: 'File data',
		name: 'fileData',
		type: 'string',
		description: 'file data',
		default: 'data',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['uploadFile'],
			},
		},
		required: true,
	},
	// 从照片生成 AI 数字人的配置
	{
		displayName: 'Image URL',
		name: 'imageUrl',
		type: 'string',
		default: '',
		description: 'image url',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['generateFromPhoto', 'generateNewLook'],
			},
		},
	},
	{
		displayName: 'Age',
		name: 'age',
		type: 'options',
		options: [
			{
				name: 'Teenager',
				value: 'Teenager',
			},
			{
				name: 'Young adult',
				value: 'Young adult',
			},
			{
				name: 'Adult',
				value: 'Adult',
			},
			{
				name: 'Elderly',
				value: 'Elderly',
			},
		],
		default: 'Adult',
		description: 'age',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['generateFromPhoto', 'generateNewLook'],
			},
		},
	},
	{
		displayName: 'Appearance',
		name: 'appearance',
		type: 'string',
		default: '',
		description: 'appearance',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['generateFromPhoto', 'generateNewLook'],
			},
		},
	},
	{
		displayName: 'Aspect Ratio',
		name: 'aspectRatio',
		type: 'options',
		options: [
			{
				name: 'Portrait [9:16]',
				value: 0,
			},
			{
				name: 'Landscape [16:9]',
				value: 1,
			},
		],
		default: 0,
		description: 'Photo aspect ratio',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['generateFromPhoto', 'generateNewLook'],
			},
		},
	},
	{
		displayName: 'Avatar Style',
		name: 'avatarStyle',
		type: 'options',
		options: [
			{
				name: 'Professional',
				value: 'Professional',
			},
			{
				name: 'Social',
				value: 'Social',
			},
		],
		default: 'Professional',
		description: 'avatar style',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['generateFromPhoto', 'generateNewLook'],
			},
		},
	},
	{
		displayName: 'Background',
		name: 'background',
		type: 'string',
		default: '',
		description: 'background',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['generateFromPhoto', 'generateNewLook'],
			},
		},
	},
	{
		displayName: 'Ethnicity',
		name: 'ethnicity',
		type: 'options',
		options: [
			{
				name: 'European',
				value: 'European',
			},
			{
				name: 'African',
				value: 'African',
			},
			{
				name: 'South Asian',
				value: 'South Asian',
			},
			{
				name: 'East Asian',
				value: 'East Asian',
			},
			{
				name: 'Middle Eastern',
				value: 'Middle Eastern',
			},
			{
				name: 'South American',
				value: 'South American',
			},
			{
				name: 'North American',
				value: 'North American',
			},
		],
		default: 'European',
		description: 'european',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['generateFromPhoto', 'generateNewLook'],
			},
		},
	},
	{
		displayName: 'Gender',
		name: 'gender',
		type: 'options',
		options: [
			{
				name: 'Female',
				value: 'Female',
			},
			{
				name: 'Male',
				value: 'Male',
			},
		],
		default: 'Female',
		description: 'gender',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['generateFromPhoto', 'generateNewLook'],
			},
		},
		required: true,
	},
	{
		displayName: 'Model',
		name: 'model',
		type: 'options',
		options: [
			{
				name: 'classic',
				value: 'classic',
			},
			{
				name: 'modern',
				value: 'modern',
			},
		],
		default: 'classic',
		description: 'model',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['generateFromPhoto', 'generateNewLook'],
			},
		},
	},
	// Add Motion操作的参数
	{
		displayName: 'Image URL',
		name: 'imageUrl',
		type: 'string',
		default: '',
		description: 'image url',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['addMotion'],
			},
		},
		required: true,
	},
	{
		displayName: 'Name',
		name: 'name',
		type: 'string',
		default: '',
		description: 'name',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['addMotion'],
			},
		},
		required: true,
	},
	{
		displayName: 'Description',
		name: 'description',
		type: 'string',
		default: '',
		description:
			'For Model 1.0, descriptions must be under 300 bytes, and for other models, they must not exceed 1500 bytes.',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['addMotion'],
			},
		},
	},
	{
		displayName: 'Welcome Message',
		name: 'welcomeMsg',
		type: 'string',
		default: '',
		description:
			'If you want to change the default greeting message of the avatar, you can use this parameter to replace it',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['addMotion'],
			},
		},
	},
	{
		displayName: 'Voice ID',
		name: 'voiceId',
		type: 'string',
		default: '',
		description: 'Voice ID',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['addMotion'],
			},
		},
		required: true,
	},
	{
		displayName: 'Model',
		name: 'modelVersion',
		type: 'options',
		options: [
			{
				name: '1.0',
				value: '1.0',
			},
			{
				name: '2.0',
				value: '2.0',
			},
			{
				name: '2.0-Pro',
				value: '2.0-Pro',
			},
			{
				name: '3.0',
				value: '3.0',
			},
		],
		default: '1.0',
		description: 'model version',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['addMotion'],
			},
		},
		required: true,
	},
	{
		displayName: 'Photo ID',
		name: 'photoId',
		type: 'string',
		default: '',
		description: 'Photo ID',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['addMotion', 'checkPhotoStatus'],
			},
		},
	},
	{
		displayName: 'Motion ID',
		name: 'motionId',
		type: 'string',
		default: '',
		description: 'Motion ID',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['checkMotionStatus'],
			},
		},
		required: true,
	},
];

export async function executeAssetsOperation(
	this: IExecuteFunctions,
	i: number,
): Promise<INodeExecutionData[]> {
	const operation = this.getNodeParameter('operation', i) as string;

	switch (operation) {
		case 'createScript':
			return await executeCreateScriptOperation.call(this, i);
		case 'uploadFile':
			return await executeUploadFileOperation.call(this, i);
		case 'generateFromPhoto':
			return await executeGenerateFromPhotoOperation.call(this, i);
		case 'generateNewLook':
			return await executeGenerateNewLookOperation.call(this, i);
		case 'addMotion':
			return await executeAddMotionOperation.call(this, i);
		case 'checkPhotoStatus':
			return await executeCheckPhotoStatusOperation.call(this, i);
		case 'checkMotionStatus':
			return await executeCheckMotionStatusOperation.call(this, i);
		default:
			return [];
	}
}

async function executeCreateScriptOperation(
	this: IExecuteFunctions,
	i: number,
): Promise<INodeExecutionData[]> {
	const returnData: INodeExecutionData[] = [];

	// 获取脚本创建所需的所有参数
	const productId = this.getNodeParameter('productId', i) as string;
	const language = this.getNodeParameter('language', i) as string;
	const name = this.getNodeParameter('name', i) as string;
	const description = this.getNodeParameter('description', i) as string;
	const targetAudience = this.getNodeParameter('targetAudience', i) as string;
	const videoLength = this.getNodeParameter('videoLength', i) as string;

	// 构建请求体
	const body = {
		product_id: productId,
		language,
		name,
		description,
		target_audience: targetAudience,
		video_length: videoLength,
	};

	const credentials = await this.getCredentials('joggAiCredentialsApi');

	const options: IHttpRequestOptions = {
		method: 'POST',
		url: `${credentials.domain as string}/v1/ai_scripts`,
		headers: {
			'x-api-key': credentials.apiKey as string,
			'Content-Type': 'application/json',
		},
		body,
		json: true,
	};

	this.logger.info('请求参数: ' + JSON.stringify(options));

	// 发送请求并获取响应
	const responseData = await this.helpers.httpRequest(options);

	// 处理响应数据
	const executionData = this.helpers.constructExecutionMetaData(
		this.helpers.returnJsonArray([responseData]),
		{ itemData: { item: i } },
	);

	returnData.push(...executionData);

	return returnData;
}

async function executeUploadFileOperation(
	this: IExecuteFunctions,
	i: number,
): Promise<INodeExecutionData[]> {
	const returnData: INodeExecutionData[] = [];

	// 获取上传文件所需参数
	const filename = this.getNodeParameter('filename', i) as string;
	const fileData = this.getNodeParameter('fileData', i) as string;

	// 获取输入的二进制数据
	const items = this.getInputData();
	if (!items[i].binary) {
		throw new Error('没有二进制数据输入!');
	}

	const binaryPropertyName = fileData;
	if (!items[i].binary[binaryPropertyName]) {
		throw new Error(`找不到指定的二进制属性: ${binaryPropertyName}`);
	}

	// 获取凭证
	const credentials = await this.getCredentials('joggAiCredentialsApi');

	// 根据API文档，此端点仅接收文件名，而不是实际文件内容
	// API会返回上传URL，用户可以在后续步骤中使用该URL上传实际文件
	const body = {
		filename: filename,
	};

	const options: IHttpRequestOptions = {
		method: 'POST',
		url: `${credentials.domain as string}/v1/upload/asset`,
		headers: {
			'x-api-key': credentials.apiKey as string,
			'Content-Type': 'application/json',
		},
		body,
		json: true,
	};

	this.logger.info('请求参数: ' + JSON.stringify(options));

	// 发送请求并获取响应
	const resultData = {
		assetResponse: undefined,
		uploadStatus: '',
		uploadResponse: undefined,
		uploadError: undefined,
	};
	const responseData = await this.helpers.httpRequest(options);
	resultData.assetResponse = responseData;

	if (responseData?.code === 0) {
		const sign_url = responseData?.data?.sign_url;

		// 执行文件上传
		try {
			// 获取二进制数据
			const binaryData = items[i].binary[binaryPropertyName];

			// 使用签名URL上传文件数据
			const uploadOptions: IHttpRequestOptions = {
				method: 'PUT',
				url: sign_url,
				headers: {
					'Content-Type': 'application/octet-stream',
				},
				body: binaryData.data,
				json: false,
			};

			this.logger.info('正在上传文件到签名URL 请求参数: ' + JSON.stringify(uploadOptions));
			const uploadResponse = await this.helpers.httpRequest(uploadOptions);
			resultData.uploadStatus = 'success';
			resultData.uploadResponse = uploadResponse;
		} catch (error) {
			resultData.uploadStatus = 'error';
			resultData.uploadError = error.message;
		}
	}

	// 处理响应数据
	const executionData = this.helpers.constructExecutionMetaData(
		this.helpers.returnJsonArray([resultData]),
		{ itemData: { item: i } },
	);

	returnData.push(...executionData);

	return returnData;
}

async function executeGenerateFromPhotoOperation(
	this: IExecuteFunctions,
	i: number,
): Promise<INodeExecutionData[]> {
	const returnData: INodeExecutionData[] = [];

	// 获取生成AI数字人所需的参数
	const imageUrl = this.getNodeParameter('imageUrl', i) as string;
	const age = this.getNodeParameter('age', i) as string;
	const appearance = this.getNodeParameter('appearance', i) as string;
	const aspectRatio = this.getNodeParameter('aspectRatio', i) as number;
	const avatarStyle = this.getNodeParameter('avatarStyle', i) as string;
	const background = this.getNodeParameter('background', i) as string;
	const ethnicity = this.getNodeParameter('ethnicity', i) as string;
	const gender = this.getNodeParameter('gender', i) as string;
	const model = this.getNodeParameter('model', i) as string;

	// 获取凭证
	const credentials = await this.getCredentials('joggAiCredentialsApi');

	// 构建请求体
	const body = {
		age,
		appearance,
		aspect_ratio: aspectRatio,
		avatar_style: avatarStyle,
		background,
		ethnicity,
		gender,
		image_url: imageUrl,
		model,
	};

	const options: IHttpRequestOptions = {
		method: 'POST',
		url: `${credentials.domain as string}/v1/photo_avatar/photo/generate`,
		headers: {
			'x-api-key': credentials.apiKey as string,
			'Content-Type': 'application/json',
		},
		body,
		json: true,
	};

	this.logger.info('请求参数: ' + JSON.stringify(options));

	// 发送请求并获取响应
	const responseData = await this.helpers.httpRequest(options);

	// 处理响应数据
	const executionData = this.helpers.constructExecutionMetaData(
		this.helpers.returnJsonArray([responseData]),
		{ itemData: { item: i } },
	);

	returnData.push(...executionData);

	return returnData;
}

async function executeGenerateNewLookOperation(
	this: IExecuteFunctions,
	i: number,
): Promise<INodeExecutionData[]> {
	const returnData: INodeExecutionData[] = [];

	// 获取生成全新形象所需的参数
	const imageUrl = this.getNodeParameter('imageUrl', i) as string;
	const age = this.getNodeParameter('age', i) as string;
	const appearance = this.getNodeParameter('appearance', i) as string;
	const aspectRatio = this.getNodeParameter('aspectRatio', i) as number;
	const avatarStyle = this.getNodeParameter('avatarStyle', i) as string;
	const background = this.getNodeParameter('background', i) as string;
	const ethnicity = this.getNodeParameter('ethnicity', i) as string;
	const gender = this.getNodeParameter('gender', i) as string;
	const model = this.getNodeParameter('model', i) as string;

	// 获取凭证
	const credentials = await this.getCredentials('joggAiCredentialsApi');

	// 构建请求体
	const body = {
		age,
		appearance,
		aspect_ratio: aspectRatio,
		avatar_style: avatarStyle,
		background,
		ethnicity,
		gender,
		image_url: imageUrl,
		model,
	};

	const options: IHttpRequestOptions = {
		method: 'POST',
		url: `${credentials.domain as string}/v1/photo_avatar/new_look/generate`,
		headers: {
			'x-api-key': credentials.apiKey as string,
			'Content-Type': 'application/json',
		},
		body,
		json: true,
	};

	this.logger.info('请求参数: ' + JSON.stringify(options));

	// 发送请求并获取响应
	const responseData = await this.helpers.httpRequest(options);

	// 处理响应数据
	const executionData = this.helpers.constructExecutionMetaData(
		this.helpers.returnJsonArray([responseData]),
		{ itemData: { item: i } },
	);

	returnData.push(...executionData);

	return returnData;
}

async function executeAddMotionOperation(
	this: IExecuteFunctions,
	i: number,
): Promise<INodeExecutionData[]> {
	const returnData: INodeExecutionData[] = [];

	// 获取添加动作效果所需的参数
	const imageUrl = this.getNodeParameter('imageUrl', i) as string;
	const photoId = this.getNodeParameter('photoId', i) as string;
	const name = this.getNodeParameter('name', i) as string;
	const description = this.getNodeParameter('description', i) as string;
	const welcomeMsg = this.getNodeParameter('welcomeMsg', i) as string;
	const voiceId = this.getNodeParameter('voiceId', i) as string;
	const modelVersion = this.getNodeParameter('modelVersion', i) as string;

	// 获取凭证
	const credentials = await this.getCredentials('joggAiCredentialsApi');

	// 构建请求体
	const body = {
		description,
		image_url: imageUrl,
		model: modelVersion,
		name,
		photo_id: photoId,
		welcome_msg: welcomeMsg,
		voice_id: voiceId,
	};

	const options: IHttpRequestOptions = {
		method: 'POST',
		url: `${credentials.domain as string}/v1/photo_avatar/add_motion`,
		headers: {
			'x-api-key': credentials.apiKey as string,
			'Content-Type': 'application/json',
		},
		body,
		json: true,
	};

	this.logger.info('请求参数: ' + JSON.stringify(options));

	// 发送请求并获取响应
	const responseData = await this.helpers.httpRequest(options);

	// 处理响应数据
	const executionData = this.helpers.constructExecutionMetaData(
		this.helpers.returnJsonArray([responseData]),
		{ itemData: { item: i } },
	);

	returnData.push(...executionData);

	return returnData;
}

async function executeCheckPhotoStatusOperation(
	this: IExecuteFunctions,
	i: number,
): Promise<INodeExecutionData[]> {
	const returnData: INodeExecutionData[] = [];

	// 获取照片ID参数
	const photoId = this.getNodeParameter('photoId', i) as string;

	// 获取凭证
	const credentials = await this.getCredentials('joggAiCredentialsApi');

	// 构建请求选项
	const options: IHttpRequestOptions = {
		method: 'GET',
		url: `${credentials.domain as string}/v1/photo_avatar/generation`,
		headers: {
			'x-api-key': credentials.apiKey as string,
		},
		qs: {
			photo_id: photoId,
		},
		json: true,
	};

	this.logger.info('请求参数: ' + JSON.stringify(options));

	// 发送请求并获取响应
	const responseData = await this.helpers.httpRequest(options);

	// 处理响应数据
	const executionData = this.helpers.constructExecutionMetaData(
		this.helpers.returnJsonArray([responseData]),
		{ itemData: { item: i } },
	);

	returnData.push(...executionData);

	return returnData;
}

async function executeCheckMotionStatusOperation(
	this: IExecuteFunctions,
	i: number,
): Promise<INodeExecutionData[]> {
	const returnData: INodeExecutionData[] = [];

	// 获取动作ID参数
	const motionId = this.getNodeParameter('motionId', i) as string;

	// 获取凭证
	const credentials = await this.getCredentials('joggAiCredentialsApi');

	// 构建请求选项
	const options: IHttpRequestOptions = {
		method: 'GET',
		url: `${credentials.domain as string}/v1/photo_avatar`,
		headers: {
			'x-api-key': credentials.apiKey as string,
		},
		qs: {
			motion_id: motionId,
		},
		json: true,
	};

	this.logger.info('请求参数: ' + JSON.stringify(options));

	// 发送请求并获取响应
	const responseData = await this.helpers.httpRequest(options);

	// 处理响应数据
	const executionData = this.helpers.constructExecutionMetaData(
		this.helpers.returnJsonArray([responseData]),
		{ itemData: { item: i } },
	);

	returnData.push(...executionData);

	return returnData;
}
