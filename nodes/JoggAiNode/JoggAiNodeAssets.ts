import { INodeProperties, IExecuteFunctions, INodeExecutionData } from 'n8n-workflow';

import { aiScriptProperties, executeAiScriptOperation } from './AssetsOperation/AiScript';
import { uploadMediaProperties, executeUploadMediaOperation } from './AssetsOperation/UploadMedia';
import {
	generateAiAvatarPhotoProperties,
	executeGenerateAiAvatarPhotoOperation,
} from './AssetsOperation/GenerateAiAvatarPhoto';
import {
	generateAvatarNewLookPhotoProperties,
	executeGenerateAvatarNewLookPhotoOperation,
} from './AssetsOperation/GenerateAvatarNewLookPhoto';
import { addMotionProperties, executeAddMotionOperation } from './AssetsOperation/AddMotion';
import {
	checkPhotoStatusProperties,
	executeCheckPhotoStatusOperation,
} from './AssetsOperation/CheckPhotoGenerationStatus';
import {
	checkMotionStatusProperties,
	executeCheckMotionStatusOperation,
} from './AssetsOperation/CheckMotionGenerationStatus';

export const assetsProperties: INodeProperties[] = [
	{
		displayName: 'Operation',
		name: 'operation',
		type: 'options',
		noDataExpression: true,
		displayOptions: {
			show: {
				resource: ['assets'],
			},
		},
		options: [
			{
				name: 'AI Scripts',
				value: 'createScript',
				description:
					"Simply provide the product information or the product_id generated in the Upload URL to create product, and you can create several different styles of product introduction scripts.If you do not provide the product_id, then the product's name and description are required.",
				action: 'AI Scripts',
			},
			{
				name: 'Upload Media',
				value: 'uploadFile',
				description:
					'Generate a signed URL for file upload. Use the sign_url obtained here to upload your file.',
				action: 'Upload Media',
			},
			{
				name: 'Generate AI Avatar Photo',
				value: 'generateFromPhoto',
				description: 'Generate four photos based on the provided parameters',
				action: 'Generate AI Avatar Photo',
			},
			{
				name: 'Generate Avatar New Look Photo',
				value: 'generateNewLook',
				description:
					'Based on the provided photo, a new photo is generated by marrying the input parameters',
				action: 'Generate Avatar New Look Photo',
			},
			{
				name: 'Add Motion',
				value: 'addMotion',
				description: 'Adds an motion for the specified Photo Avatar',
				action: 'Add Motion',
			},
			{
				name: 'Check Photo Generation Status',
				value: 'checkPhotoStatus',
				description:
					'Check the generation status of the AI profile photo according to the photo ID',
				action: 'Check Photo Generation Status',
			},
			{
				name: 'Check Motion Generation Status',
				value: 'checkMotionStatus',
				description: 'Check the generation status of the Photo Avatar motion based on the motionID',
				action: 'Check Motion Generation Status',
			},
		],
		default: 'createScript',
		required: true,
	},
	...aiScriptProperties,
	...uploadMediaProperties,
	...generateAiAvatarPhotoProperties,
	...generateAvatarNewLookPhotoProperties,
	...addMotionProperties,
	...checkPhotoStatusProperties,
	...checkMotionStatusProperties,
];

export async function executeAssetsOperation(
	this: IExecuteFunctions,
	i: number,
): Promise<INodeExecutionData[]> {
	const operation = this.getNodeParameter('operation', i) as string;

	switch (operation) {
		case 'createScript':
			return await executeAiScriptOperation.call(this, i);
		case 'uploadFile':
			return await executeUploadMediaOperation.call(this, i);
		case 'generateFromPhoto':
			return await executeGenerateAiAvatarPhotoOperation.call(this, i);
		case 'generateNewLook':
			return await executeGenerateAvatarNewLookPhotoOperation.call(this, i);
		case 'addMotion':
			return await executeAddMotionOperation.call(this, i);
		case 'checkPhotoStatus':
			return await executeCheckPhotoStatusOperation.call(this, i);
		case 'checkMotionStatus':
			return await executeCheckMotionStatusOperation.call(this, i);
		default:
			return [];
	}
}
