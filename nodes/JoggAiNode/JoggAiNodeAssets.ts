import {
	INodeProperties,
	IExecuteFunctions,
	IHttpRequestOptions,
	INodeExecutionData,
} from 'n8n-workflow';

export const assetsProperties: INodeProperties[] = [
	{
		displayName: 'Operation',
		name: 'operation',
		type: 'options',
		noDataExpression: true,
		displayOptions: {
			show: {
				resource: ['assets'],
			},
		},
		options: [
			{
				name: 'AI Scripts',
				value: 'createScript',
				description:
					'Simply provide the product information or the product_id generated in the Upload URL to create product, and you can create several different styles of product introduction scripts.If you do not provide the product_id, then the product’s name and description are required.',
				action: 'AI Scripts',
			},
			{
				name: 'Upload Media',
				value: 'uploadFile',
				description:
					'Generate a signed URL for file upload. Use the sign_url obtained here to upload your file.',
				action: 'Upload Media',
			},
			{
				name: 'Generate AI Avatar Photo',
				value: 'generateFromPhoto',
				description: 'Generate four photos based on the provided parameters',
				action: 'Generate AI Avatar Photo',
			},
			{
				name: 'Generate Avatar New Look Photo',
				value: 'generateNewLook',
				description:
					'Based on the provided photo, a new photo is generated by marrying the input parameters',
				action: 'Generate Avatar New Look Photo',
			},
			{
				name: 'Add Motion',
				value: 'addMotion',
				description: 'Adds an motion for the specified Photo Avatar',
				action: 'Add Motion',
			},
			{
				name: 'Check Photo Generation Status',
				value: 'checkPhotoStatus',
				description:
					'Check the generation status of the AI profile photo according to the photo ID',
				action: 'Check Photo Generation Status',
			},
			{
				name: 'Check Motion Generation Status',
				value: 'checkMotionStatus',
				description: 'Check the generation status of the Photo Avatar motion based on the motionID',
				action: 'Check Motion Generation Status',
			},
		],
		default: 'createScript',
		required: true,
	},
	{
		displayName: '语言',
		name: 'language',
		type: 'string',
		default: 'english',
		description: '脚本的语言',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['createScript'],
			},
		},
		required: true,
	},
	{
		displayName: '名称',
		name: 'name',
		type: 'string',
		default: '',
		description: '脚本的名称',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['createScript'],
			},
		},
		required: true,
	},
	{
		displayName: '描述',
		name: 'description',
		type: 'string',
		default: '',
		description: '脚本内容的描述',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['createScript'],
			},
		},
		required: true,
	},
	{
		displayName: '目标受众',
		name: 'targetAudience',
		type: 'string',
		default: '',
		description: '脚本的目标受众',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['createScript'],
			},
		},
		required: true,
	},
	{
		displayName: '视频长度 (秒)',
		name: 'videoLength',
		type: 'string',
		default: '15',
		description: '生成脚本的目标视频长度',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['createScript'],
			},
		},
		required: true,
	},
	{
		displayName: '文件名',
		name: 'filename',
		type: 'string',
		default: '',
		description: '上传文件的文件名',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['uploadFile'],
			},
		},
		required: true,
	},
	// 从照片生成 AI 数字人的配置
	{
		displayName: '图片 URL',
		name: 'imageUrl',
		type: 'string',
		default: '',
		description: '包含人像照片的公开 URL（可由上一步 "文件上传" 操作提供）',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['generateFromPhoto', 'generateNewLook'],
			},
		},
		required: true,
	},
	{
		displayName: '年龄段',
		name: 'age',
		type: 'options',
		options: [
			{
				name: '成人',
				value: 'Adult',
			},
			{
				name: '儿童',
				value: 'Child',
			},
			{
				name: '年轻人',
				value: 'Young',
			},
		],
		default: 'Adult',
		description: 'AI 数字人的年龄段',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['generateFromPhoto', 'generateNewLook'],
			},
		},
	},
	{
		displayName: '外观描述',
		name: 'appearance',
		type: 'string',
		default: '',
		description: '数字人外观的文字描述',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['generateFromPhoto', 'generateNewLook'],
			},
		},
	},
	{
		displayName: '宽高比',
		name: 'aspectRatio',
		type: 'options',
		options: [
			{
				name: '默认',
				value: 0,
			},
			{
				name: '16:9',
				value: 1,
			},
			{
				name: '9:16',
				value: 2,
			},
			{
				name: '1:1',
				value: 3,
			},
			{
				name: '4:5',
				value: 4,
			},
		],
		default: 0,
		description: '输出图像的宽高比',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['generateFromPhoto', 'generateNewLook'],
			},
		},
	},
	{
		displayName: '数字人风格',
		name: 'avatarStyle',
		type: 'options',
		options: [
			{
				name: '专业',
				value: 'Professional',
			},
			{
				name: '休闲',
				value: 'Casual',
			},
		],
		default: 'Professional',
		description: 'AI 数字人的风格',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['generateFromPhoto', 'generateNewLook'],
			},
		},
	},
	{
		displayName: '背景',
		name: 'background',
		type: 'string',
		default: '',
		description: '数字人背景的描述',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['generateFromPhoto', 'generateNewLook'],
			},
		},
	},
	{
		displayName: '种族',
		name: 'ethnicity',
		type: 'options',
		options: [
			{
				name: '欧洲',
				value: 'European',
			},
			{
				name: '亚洲',
				value: 'Asian',
			},
			{
				name: '非洲',
				value: 'African',
			},
			{
				name: '拉丁美洲',
				value: 'Latino',
			},
		],
		default: 'European',
		description: '数字人的种族外观',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['generateFromPhoto', 'generateNewLook'],
			},
		},
	},
	{
		displayName: '性别',
		name: 'gender',
		type: 'options',
		options: [
			{
				name: '女性',
				value: 'Female',
			},
			{
				name: '男性',
				value: 'Male',
			},
		],
		default: 'Female',
		description: '数字人的性别',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['generateFromPhoto', 'generateNewLook'],
			},
		},
	},
	{
		displayName: '模型',
		name: 'model',
		type: 'options',
		options: [
			{
				name: '经典',
				value: 'classic',
			},
		],
		default: 'classic',
		description: '用于生成的AI模型类型',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['generateFromPhoto', 'generateNewLook'],
			},
		},
	},
	// Add Motion操作的参数
	{
		displayName: '图片 URL',
		name: 'imageUrl',
		type: 'string',
		default: '',
		description: '数字人照片的公开 URL',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['addMotion'],
			},
		},
		required: true,
	},
	{
		displayName: '照片 ID',
		name: 'photoId',
		type: 'string',
		default: '',
		description: '数字人照片的唯一标识',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['addMotion'],
			},
		},
		required: true,
	},
	{
		displayName: '名称',
		name: 'name',
		type: 'string',
		default: '',
		description: '动作效果的名称',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['addMotion'],
			},
		},
		required: true,
	},
	{
		displayName: '描述',
		name: 'description',
		type: 'string',
		default: '',
		description: '动作效果的描述',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['addMotion'],
			},
		},
		required: true,
	},
	{
		displayName: '欢迎消息',
		name: 'welcomeMsg',
		type: 'string',
		default: '',
		description: '数字人的欢迎消息',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['addMotion'],
			},
		},
		required: true,
	},
	{
		displayName: '语音 ID',
		name: 'voiceId',
		type: 'string',
		default: '',
		description: '数字人使用的语音 ID',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['addMotion'],
			},
		},
		required: true,
	},
	{
		displayName: '模型版本',
		name: 'modelVersion',
		type: 'string',
		default: '1.0',
		description: '用于添加动作的模型版本',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['addMotion'],
			},
		},
	},
	// Check Photo Generation Status 操作的参数
	{
		displayName: '照片 ID',
		name: 'photoId',
		type: 'string',
		default: '',
		description: '要检查生成状态的照片ID',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['checkPhotoStatus'],
			},
		},
		required: true,
	},
	// Check Motion Generation Status 操作的参数
	{
		displayName: '动作 ID',
		name: 'motionId',
		type: 'string',
		default: '',
		description: '要检查生成状态的动作ID',
		displayOptions: {
			show: {
				resource: ['assets'],
				operation: ['checkMotionStatus'],
			},
		},
		required: true,
	},
];

export async function executeAssetsOperation(
	this: IExecuteFunctions,
	i: number,
): Promise<INodeExecutionData[]> {
	const returnData: INodeExecutionData[] = [];
	const operation = this.getNodeParameter('operation', i) as string;

	if (operation === 'createScript') {
		// 获取脚本创建所需的所有参数
		const language = this.getNodeParameter('language', i) as string;
		const name = this.getNodeParameter('name', i) as string;
		const description = this.getNodeParameter('description', i) as string;
		const targetAudience = this.getNodeParameter('targetAudience', i) as string;
		const videoLength = this.getNodeParameter('videoLength', i) as string;

		// 构建请求体
		const body = {
			language,
			name,
			description,
			target_audience: targetAudience,
			video_length: videoLength,
		};

		const credentials = await this.getCredentials('joggAiCredentialsApi');

		const options: IHttpRequestOptions = {
			method: 'POST',
			url: `${credentials.domain as string}/v1/ai_scripts`,
			headers: {
				'x-api-key': credentials.apiKey as string,
				'Content-Type': 'application/json',
			},
			body,
			json: true,
		};

		this.logger.info('请求参数: ' + JSON.stringify(options));

		// 发送请求并获取响应
		const responseData = await this.helpers.httpRequest(options);

		// 处理响应数据
		const executionData = this.helpers.constructExecutionMetaData(
			this.helpers.returnJsonArray([responseData]),
			{ itemData: { item: i } },
		);

		returnData.push(...executionData);
	} else if (operation === 'uploadFile') {
		// 获取上传文件所需参数
		const filename = this.getNodeParameter('filename', i) as string;

		// 获取凭证
		const credentials = await this.getCredentials('joggAiCredentialsApi');

		// 根据API文档，此端点仅接收文件名，而不是实际文件内容
		// API会返回上传URL，用户可以在后续步骤中使用该URL上传实际文件
		const body = {
			filename: filename,
		};

		const options: IHttpRequestOptions = {
			method: 'POST',
			url: `${credentials.domain as string}/v1/upload/asset`,
			headers: {
				'x-api-key': credentials.apiKey as string,
				'Content-Type': 'application/json',
			},
			body,
			json: true,
		};

		this.logger.info('请求参数: ' + JSON.stringify(options));

		// 发送请求并获取响应
		const responseData = await this.helpers.httpRequest(options);

		// 处理响应数据
		const executionData = this.helpers.constructExecutionMetaData(
			this.helpers.returnJsonArray([responseData]),
			{ itemData: { item: i } },
		);

		returnData.push(...executionData);
	} else if (operation === 'generateFromPhoto') {
		// 获取生成AI数字人所需的参数
		const imageUrl = this.getNodeParameter('imageUrl', i) as string;
		const age = this.getNodeParameter('age', i) as string;
		const appearance = this.getNodeParameter('appearance', i) as string;
		const aspectRatio = this.getNodeParameter('aspectRatio', i) as number;
		const avatarStyle = this.getNodeParameter('avatarStyle', i) as string;
		const background = this.getNodeParameter('background', i) as string;
		const ethnicity = this.getNodeParameter('ethnicity', i) as string;
		const gender = this.getNodeParameter('gender', i) as string;
		const model = this.getNodeParameter('model', i) as string;

		// 获取凭证
		const credentials = await this.getCredentials('joggAiCredentialsApi');

		// 构建请求体
		const body = {
			age,
			appearance,
			aspect_ratio: aspectRatio,
			avatar_style: avatarStyle,
			background,
			ethnicity,
			gender,
			image_url: imageUrl,
			model,
		};

		const options: IHttpRequestOptions = {
			method: 'POST',
			url: `${credentials.domain as string}/v1/photo_avatar/photo/generate`,
			headers: {
				'x-api-key': credentials.apiKey as string,
				'Content-Type': 'application/json',
			},
			body,
			json: true,
		};

		this.logger.info('请求参数: ' + JSON.stringify(options));

		// 发送请求并获取响应
		const responseData = await this.helpers.httpRequest(options);

		// 处理响应数据
		const executionData = this.helpers.constructExecutionMetaData(
			this.helpers.returnJsonArray([responseData]),
			{ itemData: { item: i } },
		);

		returnData.push(...executionData);
	} else if (operation === 'generateNewLook') {
		// 获取生成全新形象所需的参数
		const imageUrl = this.getNodeParameter('imageUrl', i) as string;
		const age = this.getNodeParameter('age', i) as string;
		const appearance = this.getNodeParameter('appearance', i) as string;
		const aspectRatio = this.getNodeParameter('aspectRatio', i) as number;
		const avatarStyle = this.getNodeParameter('avatarStyle', i) as string;
		const background = this.getNodeParameter('background', i) as string;
		const ethnicity = this.getNodeParameter('ethnicity', i) as string;
		const gender = this.getNodeParameter('gender', i) as string;
		const model = this.getNodeParameter('model', i) as string;

		// 获取凭证
		const credentials = await this.getCredentials('joggAiCredentialsApi');

		// 构建请求体
		const body = {
			age,
			appearance,
			aspect_ratio: aspectRatio,
			avatar_style: avatarStyle,
			background,
			ethnicity,
			gender,
			image_url: imageUrl,
			model,
		};

		const options: IHttpRequestOptions = {
			method: 'POST',
			url: `${credentials.domain as string}/v1/photo_avatar/new_look/generate`,
			headers: {
				'x-api-key': credentials.apiKey as string,
				'Content-Type': 'application/json',
			},
			body,
			json: true,
		};

		this.logger.info('请求参数: ' + JSON.stringify(options));

		// 发送请求并获取响应
		const responseData = await this.helpers.httpRequest(options);

		// 处理响应数据
		const executionData = this.helpers.constructExecutionMetaData(
			this.helpers.returnJsonArray([responseData]),
			{ itemData: { item: i } },
		);

		returnData.push(...executionData);
	} else if (operation === 'addMotion') {
		// 获取添加动作效果所需的参数
		const imageUrl = this.getNodeParameter('imageUrl', i) as string;
		const photoId = this.getNodeParameter('photoId', i) as string;
		const name = this.getNodeParameter('name', i) as string;
		const description = this.getNodeParameter('description', i) as string;
		const welcomeMsg = this.getNodeParameter('welcomeMsg', i) as string;
		const voiceId = this.getNodeParameter('voiceId', i) as string;
		const modelVersion = this.getNodeParameter('modelVersion', i) as string;

		// 获取凭证
		const credentials = await this.getCredentials('joggAiCredentialsApi');

		// 构建请求体
		const body = {
			description,
			image_url: imageUrl,
			model: modelVersion,
			name,
			photo_id: photoId,
			welcome_msg: welcomeMsg,
			voice_id: voiceId,
		};

		const options: IHttpRequestOptions = {
			method: 'POST',
			url: `${credentials.domain as string}/v1/photo_avatar/add_motion`,
			headers: {
				'x-api-key': credentials.apiKey as string,
				'Content-Type': 'application/json',
			},
			body,
			json: true,
		};

		this.logger.info('请求参数: ' + JSON.stringify(options));

		// 发送请求并获取响应
		const responseData = await this.helpers.httpRequest(options);

		// 处理响应数据
		const executionData = this.helpers.constructExecutionMetaData(
			this.helpers.returnJsonArray([responseData]),
			{ itemData: { item: i } },
		);

		returnData.push(...executionData);
	} else if (operation === 'checkPhotoStatus') {
		// 获取照片ID参数
		const photoId = this.getNodeParameter('photoId', i) as string;

		// 获取凭证
		const credentials = await this.getCredentials('joggAiCredentialsApi');

		// 构建请求选项
		const options: IHttpRequestOptions = {
			method: 'GET',
			url: `${credentials.domain as string}/v1/photo_avatar/generation`,
			headers: {
				'x-api-key': credentials.apiKey as string,
			},
			qs: {
				photo_id: photoId,
			},
			json: true,
		};

		this.logger.info('请求参数: ' + JSON.stringify(options));

		// 发送请求并获取响应
		const responseData = await this.helpers.httpRequest(options);

		// 处理响应数据
		const executionData = this.helpers.constructExecutionMetaData(
			this.helpers.returnJsonArray([responseData]),
			{ itemData: { item: i } },
		);

		returnData.push(...executionData);
	} else if (operation === 'checkMotionStatus') {
		// 获取动作ID参数
		const motionId = this.getNodeParameter('motionId', i) as string;

		// 获取凭证
		const credentials = await this.getCredentials('joggAiCredentialsApi');

		// 构建请求选项
		const options: IHttpRequestOptions = {
			method: 'GET',
			url: `${credentials.domain as string}/v1/photo_avatar`,
			headers: {
				'x-api-key': credentials.apiKey as string,
			},
			qs: {
				motion_id: motionId,
			},
			json: true,
		};

		this.logger.info('请求参数: ' + JSON.stringify(options));

		// 发送请求并获取响应
		const responseData = await this.helpers.httpRequest(options);

		// 处理响应数据
		const executionData = this.helpers.constructExecutionMetaData(
			this.helpers.returnJsonArray([responseData]),
			{ itemData: { item: i } },
		);

		returnData.push(...executionData);
	}

	return returnData;
}
